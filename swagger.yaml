---
openapi: 3.0.1
info:
  title: ProjectsManagingSystem
  description: |-
    To be able to perfom most of actions user need to register.
    After registration user need to login in, then special jwt will be generated.
    Postman is highly recommend, using it you can provide jwt in `Header > Add Key:Authorization > Value:Bearer{generatedJwt}`
    
    _Database used in project was created locally - to properly use whole API you need to provide your own connection string_
  
  version: '1.0'
  
tags:
  - name: Member
    description: Member actions. Login and register are anonymous but the rest can only be done with admin or user which account belongs to.
  - name: Project
    description: Project actions, most of them require user to be in project or to be a moderator of project.
  - name: Task
    description: Most of task actions are easier way to test task in project.

paths:
  /Member:
    post:
      tags:
      - Member
      summary: Add member to database
      description: Add member to database
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
      responses:
        '200':
          description: Success
  "/Member/{memberId}":
    get:
      tags:
      - Member
      summary: Find a member
      description: Find member by providing Id
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    delete:
      tags:
      - Member
      summary: Delete a specific member
      description: Delete member by providing Id
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    put:
      tags:
      - Member
      summary: Update member info
      description: Update info o a specific membere
      parameters:
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
      responses:
        '200':
          description: Success
  "/Member/register":
    post:
      tags:
      - Member
      summary: Register user
      description: Register user
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/MemberDto"
      responses:
        '200':
          description: Success
  "/Member/login":
    post:
      tags:
      - Member
      summary: Login user
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/LoginDto"
      responses:
        '200':
          description: Success
  "/Project":
    post:
      tags:
      - Project
      summary: Add project
      description: Add new project
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
      responses:
        '200':
          description: Success
  "/Project/{projectId}/task":
    post:
      tags:
      - Project
      summary: Add task to project
      description: Add task to a specific project 
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
      responses:
        '200':
          description: Success
  "/Project/{projectId}":
    get:
      tags:
      - Project
      summary: Find a project
      description: Find a project with specific Id
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    delete:
      tags:
      - Project
      summary: Delete a project
      description: Delete a project with specific Id
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    put:
      tags:
      - Project
      summary: Update project info
      description: Update info of a specific project
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectDto"
      responses:
        '200':
          description: Success
  "/Project/{projectId}/members":
    get:
      tags:
      - Project
      summary: Get all members in project
      description: Get all members in specific project
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
  "/Project/{projectId}/member/{memberId}/tasks":
    get:
      tags:
      - Project
      summary: Get all tasks assign to member
      description: Get all tasks assign to member in specific project
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MemberResponseDto"
  "/Project/{projectId}/tasks":
    get:
      tags:
      - Project
      summary: Get tasks in project
      description: Get all tasks in specific project 
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
  "/Project/{projectId}/task/{taskId}/member/{memberId}":
    put:
      tags:
      - Project
      summary: Assign task to member
      description: Assign task to a member in specific project. Task and member need to be in the same project.
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: taskId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
  "/Project/{projectId}/member/{memberId}":
    put:
      tags:
      - Project
      summary: Add member to project
      description: Add member to specific project.
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: memberId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
  "/Task/{taskId}":
    get:
      tags:
      - Task
      summary: Get task
      description: Get task with specific Id
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    delete:
      tags:
      - Task
      summary: Delete task
      description: Delete task with specific Id
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
    put:
      tags:
      - Task
      summary: Update task info
      description: Update specific task info
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
      responses:
        '200':
          description: Success
  "/Task":
    get:
      tags:
      - Task
      summary: Get all existing tasks
      description: Get tasks from every project
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ProjectTaskResponseDto"
    post:
      tags:
      - Task
      summary: Add new task
      description: Add new task
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          text/json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/ProjectTaskDto"
      responses:
        '200':
          description: Success
components:
  schemas:
    LoginDto:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      additionalProperties: false
    MemberDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        surname:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        confirmPassword:
          type: string
          nullable: true
      additionalProperties: false
    MemberResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        surname:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    ProjectDto:
      required:
      - deadline
      - description
      - name
      type: object
      properties:
        name:
          maxLength: 25
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
      additionalProperties: false
    ProjectTaskDto:
      required:
      - deadline
      - name
      type: object
      properties:
        name:
          maxLength: 25
          type: string
        description:
          type: string
          nullable: true
        deadline:
          type: string
          format: date-time
        dateOfCreation:
          type: string
          format: date-time
          readOnly: true
        memberId:
          type: integer
          format: int32
          nullable: true
        projectId:
          type: integer
          format: int32
        state:
          "$ref": "#/components/schemas/State"
      additionalProperties: false
    ProjectTaskResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        projectId:
          type: integer
          format: int32
        description:
          type: string
          nullable: true
        deadline:
          type: string
          format: date-time
        dateOfCreation:
          type: string
          format: date-time
          readOnly: true
        memberId:
          type: integer
          format: int32
          nullable: true
        state:
          "$ref": "#/components/schemas/State"
      additionalProperties: false
    State:
      enum:
      - 0
      - 1
      - 2
      type: integer
      format: int32
